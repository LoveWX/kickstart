Problem A. No Nine
求指定的范围内各个数位上没有9且不能被9整除的数的个数。
数位DP，其中“各个数位上没有9”可以在DP过程中直接过滤
被9整除等价于各个数位之和被9整除，所以需要某一位高位的数的和作为状态进行传递。

Problem B. 


Problem C. King's Circle
给定平面上的N个点，求有多少个三点集合，使得这三个点恰好在一个正方形(边平行于坐标轴)的边上(包括顶点)
定义包含两个点的边界矩形为边平行于坐标轴的，并包含这两点的最小矩形。则这两点处于某一对角线的两端。
延长边界矩形的边，将平面切分为9个部分，
除了边界矩形内部和对角线经过的两块区域，第三个点处于其它6个区域时，可以找到一个正方形使其边经过这三点。
A|B|C    例如两点位于矩形E的左上端点和右下端点，
D|E|F
G|H|I
则点位于A/E/I区域(不包括边界)中，三点不能形成正方形；而点位于B/C/D/F/G/H区域(包括边界)中，三点可以形成正方形。
这样，对于每两个点，计算其边界矩形中点的个数，即为不符合条件的三点集合个数。
这样的三点集合恰好只在“中间点”时被计算了一次。
从三点集合的总数C(n,3)中减去不符合条件的个数即可。时间复杂度为O(N^2)。
进一步反向考虑，可以对于每个点求将该点包含在内的边界矩形的个数，这样也是不符合条件的集合个数。
对于点(x0,y0)，用直线x=x0和直线y=y0将平面分为4块，每块区域不包括直线x=x0或直线y=y0
左上角区域中的一点、右下角区域中的一点构成的边界矩形包含了点(x0,y0)。
左下角区域和右上角区域同理。因此，需要对于每个点求出其4块区域中点的个数。
维护两个二叉索引树leftBIT和rightBIT表示当前处理结点左侧/右侧(x坐标)的点的y轴坐标
初始时点都在rightBIT中，对于每个点(x0,y0)，从rightBIT剔除x=x0上的点组成mid集合
对于mid集合中的每个点，可以通过leftBIT求得左上区域和左下区域的点数，可以通过rightBIT求得右上区域和右下区域的点数
即可求得对于该点的“不符合条件”的三点集合个数。
再将mid集合中的点加入leftBIT中，再进行下一轮计算。
时间负责度为O(Nlog(N)+4*N*logN)=O(Nlog(N))
