Problem A. Increasing Substring
给定字符串S，对于每个位置i，求最后一位是S[i]的最长严格递增字符串的长度。
每个位置和上一个位置比较即可

Problem B. Longest Progression
给定一个数组A，最多可以修改其中一个元素为任意值，求最长的等差子数组的长度。
可以先求出原数组的差值数组D,D[i]=A[i]-A[i-1]。
修改的元素一定是在某一段等差子数组的前一个元素或者后一个元素，因此可以遍历差值数组得到结果。
修改一段等差子数组的后一个元素会有几种可能：
1.原等差子数组长度加1，如2,4,6,20,7
2.原等差子数组长度加2，因为修改A[i]直接导致D[i]和D[i+1]改变，如2,4,6,20,10,7
3.原等差子数组和下一个等差子数组公差相同，连在一起，如2,4,6,20,10,12,14
由3可见也需要计算差值数组中相等的每一段的起末下标。
从左至右遍历差值数组，对于其中相等的每一段，依次尝试：
修改后续第一个元素，长度是否可能加1
第二个元素是否正好因为第一个元素的修改而接上等差子数组
这两个元素的修改是否接上了下一段相同公差的等差子数组
再从右至左再计算一遍，得到结果

Problem C. Consecutive Primes
给定一个数Z，求最大的连续的两个质数，使其乘积小于等于Z
只有两种可能：
1.p0<=sqrt(Z)<p1
2.p0<p1<=sqrt(Z)
从(int)sqrt(Z)开始逐一减小找到其中一个质数p1，从(int)sqrt(Z)逐一增大找到另一个质数p2
如果两者乘积小于等于Z，则为第二种情况；
否则从p1-1开始逐一减小找到另一个质数p0，此为第一种情况

Problem D. Truck Delivery
给定N个结点的树，结点1为根。每个结点到结点1都有一条简单路径。
两个结点之间的路径有限重值Li，超过需要罚款Ai。
给出一些请求。每个请求给定起始结点和载重，求该结点到结点1的路径上的所有罚款的最大公约数。
树的结构是固定的，每个请求在树上的位置是固定的，因此不能按照请求的顺序来计算
应该dfs+回溯，依次遍历到每个（有请求的）结点上
这样对于每个请求，都能知道此时到结点1的路径上每个罚款是多少了。
将所有路径按限重从大到小排序并从1编号，编号用作树状数组的下标，罚款Ai作为树状数组每个位的值
将某个结点添加到路径中时，相当于在树状数组中在特定下标从0变为Ai，此时需要更新树状数组中每个关联位
由于gcd(0,k)=gcd(k,0)=k，因此每个关联位bit[i]=gcd(bit[i],Ai)
这样，用树状数组前缀和的方法就可以求出特定前缀元素的gcd
而对每个请求求罚款的gcd，需要先用载重计算出前缀的长度，再在树状数组中求前缀gcd
但是这样回溯时不好在树状数组中将某一位重置为0
需要在dfs进入某个结点更新状态前记录下所有修改的下标的原值，退出结点之前按记录值恢复
这样就达到了恢复状态的目的
每个请求排序并标号需要O(QlogQ)，树状数组长度为O(N)，更新和前缀gcd均为O(logN)
dfs需要遍历每个结点，为O(N)，需要记录树状数组中的关联点，需要O(logN)，求前缀gcd需要O(logN)，恢复状态需要O(logN)
总时间复杂度为O(QlogQ+N*(logN+logN+logN))=O(NlogN+QlogQ)
