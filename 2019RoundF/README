Problem A. Flattening
给定N个元素的数组表示每一段墙的高度，可以将某一段墙修改为任意高度。目标是整段墙从左到右高度变化次数最多为K，求最小修改墙高度的次数。
由于墙的高度可以修改为任意值，所以先将墙的高度压缩为C个整数表示
1.设dp[change][lastnum]表示墙[0,i]最终高度为lastnum且高度变化次数为change时，需要的最小修改次数。
1.1.考虑第i+1段墙，根据第i+1段墙的高度height[i+1]，结合第i段墙的高度，可以得知是否需要修改第i+1段墙。
1.2.如果第i段墙和第i+1段墙高度相同，则高度变化次数不变
如果第i段墙和第i+1段墙高度不同，则高度变化次数加1
1.3.而修改次数需要取这些状态的最小值加上1.1.的修改次数
所以状态转移方程为：
dp[i+1][change][lastnum]=(height[i+1]==lastnum ? 0 : 1)+min(dp[i][change][lastnum], min{dp[i][change-1][j],0<=j<C,j!=lastnum} ) ,式1
由于状态dp[i+1]只和状态dp[i]相关，故可以只用二维数组表示前后相邻的两组状态进行转移
总状态数为O(N*N*K)，可以在计算状态dp[i+1][change]之前将dp[i+1][change-1]的各元素放入multiset中，即可在O(logN)时间中求出除自身外其它元素最小值
总时间复杂度为O(N*N*K*logN)
2.在计算dp[i+1][change][lastnum]时考虑dp[i][change-1][lastnum]和dp[i][change][lastnum]，
可见dp[i][change][lastnum]比dp[i][change-1][lastnum]多了1次变化次数，
而这1个变化次数相当于[0,i]中1次或多次的修改次数，也就是少变化1次，需要多修改至少1次。
因此，dp[i][change-1][lastnum]<=dp[i][change][lastnum]
式1等价于：
dp[i+1][change][lastnum]=(height[i+1]==lastnum ? 0 : 1)+min(dp[i][change][lastnum], min{dp[i][change-1][j],0<=j<C} ) ,式2
不需要求最小值，因此总时间复杂度为O(N*N*K)
3.另一种DP方法
先设R(i,j)为将范围[i,j]中的墙高度变为一样所需的最小修改次数，可以在O(N*N*logN)时间内完成
设F(x,k)为若范围[0,x]中墙高度的改变次数最多为k时，所需要的最小修改次数
设范围[0,i]中墙高度变化次数为k-1，其最小修改次数为F(i,k-1)；
而范围[i+1,x]中墙高度均一致，也就是[i+1,x]是最后一段高度一样的墙，其最小修改次数为R(i+1,x)
枚举最后一次高度变化的分界点即可得到F(x,k)
即F(x,k)=min{F(i,k-1)+R(i+1,x)},0<=i<x


Problem B. Teach Me

Problem C. Spectating Villages
