Problem A. Arithmetic Square
3×3的矩阵中间元素缺失，填上一个数使得三行三列两对角线组成的等差数列（长度为3）数量最多
遍历中间行、中间列和两对角线如果可以组成等差数列需要填什么数即可

Problem B. Cutting Intervals
有一些区间[Li,Ri]，如果在非区间端点的整数点X切分一次，即Li<X<Ri，则该区间切分为两个区间[Li,X][X,Ri]
求最多切C次时，最多可以得到多少个区间
将所有区间端点排序，从小到大遍历。维持count表示切分当前点可以多获得多少个区间，即当前整数点被多少个区间覆盖且不是其端点
对于区间[Li,Ri]，在[Li+1,Ri-1]处切分将多得到一个区间，因此在Li+1处count+=1，而在Ri处count-=1
这样可以维持在覆盖的区间数目变化时的count值。累加每个count值对应的整点个数。
从count值从大到小选择C个点作为切分点即可
端点排序需要O(NlogN)，遍历并累加每个count值对应的点数需要O(NlogN)，找C个点不会超过O(NlogN)，因此总时间复杂度为O(NlogN)

Problem C. Final Exam
给定一些题集，每个题集[Ai,Bi]表示难度为Ai,Ai+1,...,Bi共Bi-Ai+1个题目。
现有M个学生，能力为Sj，需要依次分配给每个学生一个题目Di，使得|Di-Sj|最小，如果有多个最小值的题目，取难度最小的那个。
一个题目分配给一个学生后不能再分给其他学生。
将每个题集作为区间进行维护，按照(右端点,左端点)方式建立map。
对于每个学生，找到对应的题目区间，分配题目，再更新区间。
建立map需要O(NlogN)，每次查找需要O(logN)，总时间复杂度为O(NlogN+MlogN)

Problem D. Primes and Queries
给出数组A和一组操作，对于修改操作修改其中某个值Ai，对于查询操作，计算[L,R]范围内所有V值的和，即：
sigma[L,R](V(Ai^S-(Ai%P)^S))
基础的数据结构可以用树状数组表示，需要对公式进行处理
利用Lifting-the-exponent lemma，可得：
对于n和质数p，p不能整除a，p不能整除b，
如果p是奇质数且p能整除a-b：
V(a^n-b^n)=V(a-b)+V(n)
如果p==2：
如果4能整除a-b，则：
V(a^n-b^n)=V(a-b)+V(n)
如果2能整除a-b，则：
V(a^n-b^n)=V(a-b)+V(a+b)+V(n)-1
1)如果Ai%p==0，则V(Ai^S-(Ai%P)^S)=V(Ai^S)=S*V(Ai)
需要用一个树状数组保存这种情况的V(Ai)
2)如果Ai<p，则V(Ai^S-(Ai%P)^S)=0
3)如果Ai>P且Ai%p!=0，则需要将V(Ai-Ai%p)的值保存在一个树状数组中
而将V(Ai+Ai%p)-1的值保存在另一个树状数组中
还需要第三个树状数组来保存各个位置的值是否能被p整除(Ai%p==0)，以便求得V(S)的累加和
对于修改操作，可以通过保存原数组，从指定位置减去原数值再加上新值的方式实现
V(Ai)可以在O(logAi)的时间中算出，所以初始化需要O(Nlog(max(Ai)))的时间
每个修改操作和初始化单个元素时间复杂度相同，为O(log(val))
每个查询操作即在树状数组上求范围和即可，时间复杂度为O(log(max(S,val))
总体时间复杂度为 O(Nlog(max(Ai))+Q(logN+log(max(S,val))))
