Problem A. Big Buttons

Problem B. Mural

Problem C. Let Me Count The Ways
N对情侣坐成一排，求其中M对情侣不相邻的所有排列数。
这里N<=100000，而且递推关系比较难求，可以用容斥原理
同时注意到，容易求得“特定的k对情侣相邻的排列数”，设为g(k)。
则需要从M对中选择这k对，每一对都有2中排列，可以将这k对相邻的情侣视作1个人，和剩下的2(N-k)个人全排列
即g(k)=C(M,k)*2^k*(2N-k)!
注意这里g(0)表示M对情侣中最少0对相邻，即不计相邻关系的全排列数
而g(k),k>0只是针对M对中特定的k对需要相邻，并没有限制剩下的M-k对是否相邻。
所以会重复计算有多于1对情侣相邻的排列数，
比如包含"AaBb"的排列在包含"Aa"的排列中计算了，在包含"Bb"的排列中也计算了
所以可以运用容斥原理，依次处理多于2对，多于3对...的排列数。
即ans=g(0)-g(1)+g(2)-...+(-1)^k*g(k)
也可以这样理解，按照M对中第i对情侣是否相邻来将所有排列划分成M+1种集合：
S1:M对中第1对情侣相邻的排列组成的集合
S2:M对中第2对情侣相邻的排列组成的集合
...
SM:M对中第M对情侣相邻的排列组成的集合
剩下的排列没有M对中的情侣相邻，实际上就是要求的集合
那么需要从全集中减去1个集合的基数，加上任意2个集合交集的基数，减去任意3个集合交集的基数...
注意到算式中的C(M,k)=C(M,k-1)*(m-k+1)/k，使用模逆元求解，时间复杂度不需要O(M^2)，只需要O(M)
