Problem A. Speed Typing
给定字符串I和字符串P，求需要删除P中的多少个字符得到I
依次尝试匹配I和P中的字符即可，注意P字符可能在匹配完I后仍有剩余字符

Problem B. Challenge Nine
给定一个整数N，添加一个数字字符，使得N变为最小的能被9整除的数。
先计算现有的数字字符的和，并计算出需要添加的字符c。
如果c!='0'，则从最高位开始，找到第一个比c大的字符，添加到该字符前面
如果c=='0'，则从次高位开始，找到第一个比c大的字符，添加到该字符前面

Problem C. Palindrome Free Strings
给出一个包含未定字符'?'的01串S，求是否可以将未定字符'?'设置为'0'或'1'使得字符串不包含大于等于5的回文串
不包含大于等于5的回文串是指不包含长度为5且不包含长度为6的回文子串
S[0,...,i]是否合法，取决于S[0,...,i-1]是否合法，及S[i-5],S[i-4],S[i-3],S[i-2],S[i-1],S[i]是否合法
也就是说，对于某个前缀S[0,...,i]，如果知道了它可以以长度为6的子串为后缀
就可以推导出前缀S[0,...,i+1]的长度为6的后缀子串。
先遍历前6个字符找到合法后缀字符串集合，再对后面的字符依次递推找到合法后缀字符串集合。
递推完整个字符串后如果合法后缀字符串集合非空，则说明原问题有解。
时间复杂度O(2^6*N)

Problem D. Interesting Integers
求整数范围[A,B]中各个数位积能够被各个数位和整除的数的个数。
设F(A)为[1,A]中符合条件的数的个数，那么原问题的解为F(B)-F(A-1)
注意到最大的整数为10^12，因此数位和最大只有9×12=108。但是最大值10^12有13位，因此认为数位和最大为9*13=117
数位和的取值范围较小，可以考虑分别计算。
即计算[1,A]中符合条件并且数位和为特定值的数的个数，并累加所有可能数位和的结果。
数位积的取值范围较大，不能直接用于状态，需要转换一下思路。
当a!=0时有：gcd(a,b)==b <==> a%b==0
那么可以从初始值中，依次将因数去掉，直到该值变为1
具体来说，对于某个固定的数位和sum，如果一个数需要能整除sum，就需要包含sum的每个因数
因此设定数位积的初始值product=sum，
遇到新的数字a时，就将product置为product/gcd(product,a)，这样就累计了数字a对最后结果(数位积/数位和)的影响
而且由于数位和sum的取值范围比较小，数位积的表示范围也可以比较小了
特别的，当数字中有0时，数位积为0，这时产生的数字必定合法，需要累加到最终结果中
因此，可以用数位dp来解题。
对于特定的数位和，数位积也固定，那么用两个值分别表示数位积product和数位和sum，
从高位到低位依次遍历每个数字位a，并更新数位积和数位和
product=product/gcd(product,a)
sum=sum-a
遍历完所有数位后，如果product==1 and sum==0，说明该次搜索合法，需要累积结果
对于上界和下界，分别遍历每个可能的数位和分别dp即可。
设D为数位个数，数位和可能有9D种，上下界各搜索一次，每个数位和需要搜索D个数位，每个数位上需要查询可能的9个值
时间复杂度为O(2*9D*9D)
