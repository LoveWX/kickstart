Problem A. Walktober
给定一个表格，每行表示一个参赛者各天的步数。指定一个参赛者，求出：如果他要每天步数要达到所有参赛者当天最高，还需要增加的总的步数。
对于表格的每一列，计算除指定参赛者之外的最大值，从而求出当天需要增加的步数。

Problem B. Curling
给出一句冰壶游戏结束后红黄两队的冰壶位置，计算两队的得分。
大本营中心在(0,0)，给出大本营的半径和所有冰壶的颜色和坐标。只有与大本营有相交(相切亦可)的冰壶算分。
如果一个冰壶比另一队的所有冰壶都更靠近大本营中心，则该冰壶为所属队增加1分。
筛选出所有和大本营有交集的冰壶，按到原点的距离从小到大排序。
按距离从小到大计算同色的冰壶的数量，直到遇到第一个异色的冰壶。同色冰壶所属的队伍获得相应的分数。

Problem C. Happy Subarrays
如果一个数组的所有前缀的和都是非负数，则该数组为Happy数组。
给定数组A，求数组A的所有的Happy子数组的和的总和。
想要确定每个Happy子数组，就需要对从数组每个元素A[i]起始的子数组，找到第一个使该子数组和为负数的元素位置。
这样就找到了所有以A[i]为起始的Happy子数组。
设S[i]为数组到A[i]为止的前缀和，即S[i]=A[0]+A[1]+...+A[i]，也就可以表示其中某一段子数组的和
对于某个S[i]，记录下之前每个位置的前缀和S。如果此时在i之前的位置j出现S[j]<S[i]的情况，即：
A[j+1]+...+A[i]=S[i]-S[j]<0
就可以知道对于起点元素A[j+1]而言，最长的Happy子数组为A[j+1],A[j+2],...,A[i-1]
因此在遍历到某个元素A[i]时，可以通过S[i]将计算出一些以之前元素作为起点的最长Happy子数组，
这些子数组不可能更长了，因此可以将它们从记录中剔除。
这样遍历每个元素后，记录中剩余的元素没有找到右边界，其对应的最长Happy子数组可以一直延伸到数组末端。
这样对于每个元素，就找到了以该元素为起点的最长Happy子数组。
可以通过求前缀和Si数组的前缀和SSi的方式，来计算Happy子数组的和的总和：
A[0] A[1] ... A[i-1] A[i]
A[0] A[1] ... A[i-1] A[i] A[i+1]
...
A[0] A[1] ... A[i-1] A[i] A[i+1] ... A[j]
因此
S=(S[i]-S[i-1])+(S[i+1]-S[i-1])+...+(S[j]-S[i-1])
 =(SS[j]-SS[i-1])+(SS[i-1]*(j-i+1))
需要求数组的前缀和数组S和前缀和前缀和数组SS，需要O(N)时间
求每个最长Happy子数组时，需要用map或者堆维护之前元素的前缀和以找到最大值，因此需要O(NlogN)
总时间复杂度为O(NlogN)

Problem D. Cute Little Butterfly
给出一个二维纵截面，x轴代表地面，y值代表高度。在该纵截面上有一些点具有能量，蝴蝶经过该点是可以收集这些能量。
蝴蝶从(0,10^18)出发，可以以下方式动作：
1.下降一格：从(x,y)到(x,y-1)
2.前进一格：如果方向朝右，则从(x,y)到(x+1,y)；如果方向朝左，则从(x,y)到(x-1,y)
3.改变方向：如果方向朝右则改为朝左；如果方向朝左则改为朝右。但是需要花费能量E
求蝴蝶能具有的最大能量值
蝴蝶下降一格不需要能量，因此可以将所有点按y值分组，只考虑y值相邻的两组点，从y值最大的分组计算到y值最小的分组
每个点需要记录从该点离开该y值(下一步就是下降一格)时，朝向左和朝向右时的最大能量值
对于相邻的两组点，需要计算从上一组点中的一个朝左或朝右下降到这一组点的y值后，
到达这组点中的一个且朝左或朝右时累积的能量值。可以通过前缀和的方式分情况计算。
1.不转向。本组中朝左某点只能由该点左侧的上组朝左点而来；本组中朝右某点只能由该点右侧的上组朝右点而来
2.转向1次。本组中朝左某点可由上组朝右点行进至极右侧转向而来；本组中朝右某点可由上组朝左点行进至极左侧转向而来
3.转向2次。本组中某点可由上组中某同向点在极左和极右转向而来
4.转向3次。本组中某点可由上组中某异向点在极左和极右转向而来，可以看作转向2次的点到达位置后再转向一次
这样就可以求出相邻两组点两种朝向的最大能量值。
从起始y值依次计算，可以得到y值最小的一组点的两种朝向的最大能量值。其中的最大值即为所求
相邻两组点计算时需要的时间正比于两组点的个数。而每个点每个朝向计算一次。因此计算的总时间复杂度为O(N)
当时需要对所有点按照y值分类，并按照x值排序。因此总时间复杂度为O(NlogN)
