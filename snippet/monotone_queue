滑动窗口最值问题可以用优先队列解决，时间复杂度为O(NlogN)。也可以使用单调队列解决，时间复杂度为O(N)。
单调队列是一种双端队列，队列中的元素从一端到另一端是单调排列的。
元素从一侧入队时，会先保证队列的单调性，将即将(因当前元素入队而)违背单调性的队列元素依次出队后再入队
而将(因窗口滑动导致)不满足条件的元素从另一端出队。
由于队列元素是单调的，可以方便地找到最值，就是元素出队一端的首元素。
以求区间最大值为例，维持单调队列从出端到入端单调减。
滑动窗口向右滑动时新元素需要入队，需要先从入端弹出小于等于当前元素的队列元素，再入队
而如果出端首元素需要出队，就弹出。弹出之后出端的首元素即为滑动区间最大值。
注意这里单调队列中仍可能留有一部分不在滑动窗口中的元素，但是它们的值较小，不会影响最大值。
只有当它们移动到出端时，才会因为小标被移出队列。

vector<int> maxSlidingWindow(vector<int>& nums, int k) {
    deque<int> dq;
    vector<int> ans;
    ans.reserve(nums.size()-k+1);
    for(int i=0;i<nums.size();++i)
    {
        while(!dq.empty() && nums[dq.back()]<=nums[i])
        {
            dq.pop_back();
        }
        dq.push_back(i);
        while(dq.front()<i-k+1)//这里可以写成if,因为出端每次最多弹出一个元素
        {
            dq.pop_front();
        }
        if(i>=k-1)
        {
            ans.push_back(nums[dq.front()]);
        }
    }
    return ans;
}
