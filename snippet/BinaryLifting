一棵树中包含n个节点，每个节点到根节点的路径包括了该节点的第i个祖先节点
可以通过倍增法(Binary Lifting)求得某个结点的第i个祖先节点，时间复杂度为O(logn)，空间复杂度为O(nlogn)
其本质是dp，dp[i][j]中存储的是第i个节点的第2^j个祖先节点的下标
这样，求第i个节点的第2^j个祖先节点，就可以转换成求第i个节点的第2^(j-1)个祖先节点的第2^(j-1)个祖先节点
即：dp[i][j] = dp[dp[i][j - 1]][j - 1]
这个转换的数学本质是对每个节点记录下2的幂次个的祖先节点，
这样对于第k个祖先节点，就可以依照k的二进制依次将节点上移：每次向根节点方向上移2的幂次个节点
而各个状态之间因为都是用2的幂次标识，互相之间转换也很方便
预处理时，dp[i][0]即为第i个节点的第2^0=1个祖先节点，即dp[i][0]=parent[i]
另外可以花费O(nlogn)的时间计算出每个状态的值，当然也可以用到的时候再计算
对于求第k个祖先节点的问题，还需要额外保存各个节点的高度，防止k的值越界。
构建各个结点的关系需要O(n)的时间，而查询最近公共祖先需要O(logn)的时间
因此对于二叉树而不是多叉树上的单次查询，应直接构建从根开始的路径来查找。

int N;//结点总数
int LOGSIZE=16;//2^16>=节点总数
vector<int> parent;//父节点
vector<vector<int>> anc;//2^i个祖先节点,跳过根节点则用-1表示

vector<int> depth;//每个节点的深度,根节点深度为0
int dfs_depth(vector<int> &parent,int curr)
{
    if(depth[curr]!=-1) return depth[curr];
    return depth[curr]=1+dfs_depth(parent,parent[curr]);
}

//先计算每个节点2^i个祖先
void Init(int n, vector<int>& parent) {
    anc.assign(n,vector<int>(LOGSIZE,-1));
    this->N=n;
    for(int i=0;i<N;++i)
    {
        anc[i][0]=parent[i];
    }
    for(int j=1;j<LOGSIZE;++j)
    {
        for(int i=0;i<N;++i)
        {
            if(anc[i][j-1]!=-1)
            {
                anc[i][j]=anc[anc[i][j-1]][j-1];
            }
        }
    }
}

//计算某个节点的第k个祖先节点
//总体的思想是从起始点开始，对要上溯的k值的每个bit位，依次尝试向上查找
//如果没有超过根结点，且仍然可以向上找（没有找到），就向上移动。
int getKthAncestor(int curr, int k) {
    for(int b=0;k!=0;k>>=1,++b)
    {
        if((k&1)==0) continue;
        if(anc[curr][b]==-1) return -1;
        curr=anc[curr][b];
    }
    return curr;
}

//也可以通过dp的方式自顶向下地求,不太直观
int dp(int curr,int pre2)
{
    if(mem[curr][pre2]!=-2) return mem[curr][pre2];
    return mem[curr][pre2]=dp(dp(curr,pre2-1),pre2-1);
}

void Init(int n, vector<int> &parent)
{
    depth.assign(n,-1);
    depth[0]=0;
    for(int i=1;i<n;++i)
    {
        depth[i]=dph(parent,i);
    }
    mem.assign(n,vector<int>(16,-2));//2^16>=节点总数
    for(int i=0;i<n;++i)
    {
        mem[i][0]=parent[i];
    }
}

int Query(int node, int k)
{
    if(k>depth[node]) return -1;
    for(int i=0;k!=0;++i,k>>=1)
    {
        if((k&1)!=0)
        {
            node=dp(node,i);
        }
    }
    return node;
}

倍增法(Binary Lifting)可以用于求结点的最小公共祖先：
先将深度较大的结点向上跳直到两个结点深度一致。如果两个结点重合，那该结点即所求
否则两个结点一起向上跳，直到两个结点的父结点一致，该父结点即为所求
int findLCA(int u,int v)
{
    if(depth[u]<depth[v]) swap(u,v);
    for(int b=LOGSIZE-1;b>=0;--b)
    {
        if(anc[u][b]>=0 && depth[anc[u][b]]>=depth[v])
        {
            u=anc[u][b];
        }
    }
    if(u==v) return u;
    for(int b=LOGSIZE-1;b>=0;--b)
    {
        if(anc[u][b]!=anc[v][b])
        {
            u=anc[u][b];
            v=anc[v][b];
        }
    }
    return anc[u][0];
}
