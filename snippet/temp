#include <iostream>
#include <vector>
#include <array>
#include <iomanip>
using namespace std;

double eps = 1e-6;
int N, P, H;
int obstacle[10][2];

double f(double R, double a, int xi, int yi, double x)
{
    return (x - xi)*(x - xi) + (a*x*(x - P) - yi)*(a*x*(x - P) - yi) - R*R;
}

double f1(double R, double a, int xi, int yi, double x)
{
    return 2 * (x - xi) + 2 * a*(a*x*(x - P) - yi)*(2 * x - P);
}

bool CheckA(double R, double a, int x, int y)
{
    int times = 100;
    double x0 = x+R, x1;
    do
    {
        x1 = x0 - f(R, a, x, y, x0) / f1(R, a, x, y, x0);
        times -= 1;
    } while (times != 0 && abs(x1 - x0) > eps);
    return times != 0;
}

vector<array<double, 2>> CalcA(double R, int rx, int ry)
{
    vector<array<double, 2>> ans;
    double upA = 4.0 * (H - R) / P / P / eps;
    double midA = (double)ry / rx / (rx - P)/(-eps);
    if (ry + R < H)
    {
        int left = midA, right = upA, mid;
        while (left < right)
        {
            mid = (right - left) / 2 + left;
            if (CheckA(R, -mid*eps, rx, ry))
            {
                right = mid;
            }
            else
            {
                left = mid + 1;
            }
        }
        if (left < upA)
        {
            ans.push_back({ -upA*eps, -left*eps });
        }
    }
    if (ry - R >= 0)
    {
        int left = 0, right = midA, mid;
        while (left < right)
        {
            mid = (right - left) / 2 + left;
            if (CheckA(R, -mid*eps, rx, ry))
            {
                left = mid + 1;
            }
            else
            {
                right = mid;
            }
        }
        ans.push_back({ -(left - 1)*eps,0 });
    }
    return ans;
}

bool CheckR(double R)
{
    vector<array<double, 2>> tans = CalcA(R, obstacle[0][0], obstacle[0][1]);
    for (int i = 1; i < N && !tans.empty(); ++i)
    {
        vector<array<double, 2>> va = move(tans);
        vector<array<double, 2>> vb = CalcA(R, obstacle[i][0], obstacle[i][1]);
        for (array<double, 2> &a : va)
        {
            for (array<double, 2> &b : vb)
            {
                if (a[0] <= b[1] && b[0] <= a[1])
                {
                    tans.push_back({ max(a[0],b[0]),min(a[1],b[1]) });
                }
            }
        }
    }
    return !tans.empty();
}

int main()
{
	int ncase;
	cin >> ncase;
	for (int icase = 1; icase <= ncase; ++icase)
	{
        cin >> N >> P >> H;
        for (int i = 0; i < N; ++i)
        {
            cin >> obstacle[i][0] >> obstacle[i][1];
        }
        int left = 1, right = 1e9, mid;
        while (left < right)
        {
            mid = (right - left) / 2 + left;
            if (CheckR(mid*eps))
            {
                left = mid + 1;
            }
            else
            {
                right = mid;
            }
        }
        cout << "Case #" << icase << ": " << fixed << setprecision(6) << (left - 1)*eps << endl;
	}
	return 0;
}
