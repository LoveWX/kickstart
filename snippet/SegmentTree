线段树是一种二叉搜索树，它将一个区间从中间划分成两个子区间的并。其根结点表示整个区间。
每个非叶结点表示一段区间[l,r]，其左结点表示子区间[l,(l+r)/2]，其右结点表示子区间[(l+r)/2+1,r]
每个叶结点表示一个单位区间
这样，任意一段区间都可以用线段树中的一些(所表示区间连续的,互不相交的)结点表示，这些结点数量为O(logn)
线段树中每个结点的属性标识该结点所属区间的属性。
这样，对于区间中各个结点的相同操作，可以记录在接近根结点的"高层"结点中，不用分散下发到子结点中。
例如需要对[l,r]的元素都加上k，那么可以记录在该结点的属性信息中，查询[l,r]子区间属性时需要考虑这个属性信息。
如果查询的是[l,r]的真子区间，则需要拆分操作到两个子结点上。
注意结点属性值的修改方式依据属性含义不同而不同。如最大值是左右两个子结点最大值的大者；而区间和就要按区间元素个数累积了
可见，修改和查询特定区间的时间复杂度为O(logn)
可以仿照二叉树的线性表示法来表示线段树，设2^(k-1)<n<=2^k，那么需要2^(k+1)-1个结点。
一般可以直接开4n长度的线性表来表示线段树。所以空间复杂度为O(n)

如果根结点下标为0，则结点a的左子结点下标为2a+1，右子结点下标为2a+2
如果根结点下标为1，则结点a的左子结点下标为2a  ，右子结点下标为2a+1
两种表示方法均可。
修改和查询操作核心是找到区间对应的各个结点。从对应整个区间的根结点开始向下递归，是后序遍历
如果当前结点表示区间都在操作目标区间中，则操作直接修改该结点属性，不再向下递归
否则，就递归左右子结点进行操作，如果操作目标区间和子结点区间相交。
修改操作可以在递归处理左右子结点后由其属性汇总更新本结点信息
查询操作可以在递归处理左右子结点后由其属性汇总并添加上本结点属性信息得到
非叶结点中表示区间属性的属性值其实就包含了lazy标记，没有将操作从区间下发。
这样操作中就不需要进行push down
每个操作实际上递归处理了从根结点到某些结点的数条路径，路径上每个结点表示区间都是前一个结点表示区间的子区间
有一些修改操作的信息留在了"高层"结点中没有下发，因此查询操作遍历时应该利用尾递归的性质依次回收这些修改信息

//用于处理加法的线段树，包含修改区间值和求区间最大值的操作
struct SegmentTreeMax
{
    int n;
    vector<int> maxv, tags;
    int inf;
    SegmentTreeMax(int size)
    {
        n = size;
        maxv.assign(n << 2, 0);
        tags.assign(n << 2, 0);
    }
    SegmentTreeMax(vector<int> &v)
    {
        n = v.size();
        maxv.assign(n << 2, 0);
        tags.assign(n << 2, 0);
        for (int i = 0; i < n; ++i)
        {
            Modify(i, i, v[i]);
        }
    }
    void Modify(int c, int l, int r, int L, int R, int diff)
    {
        if (L <= l && r <= R)
        {
            maxv[c] += diff;
            tags[c] += diff;
            return;
        }
        int mid = (l + r) >> 1;
        if (L <= mid)
        {
            Modify((c << 1) + 1, l, mid, L, R, diff);
        }
        if (R > mid)
        {
            Modify((c << 1) + 2, mid + 1, r, L, R, diff);
        }
        maxv[c] = max(maxv[(c << 1) + 1], maxv[(c << 1) + 2]) + tags[c];
    }
    int Query(int c, int l, int r, int L, int R)
    {
        if (L <= l && r <= R)
        {
            return maxv[c];
        }
        int mid = (l + r) >> 1;
        int ans = INT_MIN;
        if (L <= mid)
        {
            ans = max(ans, Query((c << 1) + 1, l, mid, L, R));
        }
        if (R > mid)
        {
            ans = max(ans, Query((c << 1) + 2, mid + 1, r, L, R));
        }
        return ans + tags[c];
    }
    void Modify(int L, int R, int diff)
    {
        Modify(0, 0, n - 1, L, R, diff);
    }
    int Query(int L, int R)
    {
        return Query(0, 0, n - 1, L, R);
    }
};
